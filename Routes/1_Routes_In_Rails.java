In Ruby on Rails, there are two primary ways to define routes: using the resources method and using manual routes.
  Lets explain the difference between the two and discuss their pros and cons.




MANUAL ROUTES----->
-------------------------------------------------------------------------------------------------------------------------


Rails.application.routes.draw do
 
  get 'students', to: 'students#index'   --> List all studdnts
    
  get 'students/:id', to: 'students#show',  --> Show a clicked student

  get 'students/:id/edit', to: 'students#edit' --> This is the for the form to edit the student
  patch 'students/:id', to: 'students#update'  --> Were the edit request gets routed to




  get '/students/new', to: 'students#new'  ----> The form to create a new student
  post '/students', to: 'students#create'  -----> Where the create request is routed to

  get 'students/:id/delete', to: 'students#destroy'  ---> The form to delete a student
  delete 'students/:id', to: 'students#destroy'    --> Where the delete request is routed to

end






RESOURCE ROUTES -------->
-------------------------------------------------------------------------------------------------------------------------


# config/routes.rb
Rails.application.routes.draw do
  resources :students
end










In Ruby on Rails, there are two primary ways to define routes: using the resources method and using manual routes.
  Lets explain the difference between the two and discuss their pros and cons.

Using the resources method:
The resources method in Rails provides a convenient way to define RESTful routes for a resource. 
It automatically generates a set of standard routes for CRUD operations (index, show, new, create, edit, update, destroy) 
for a specified controller.


# config/routes.rb
Rails.application.routes.draw do
  resources :students
end


Pros of using resources: ------------------------------->

Convenience: resources generates a standardized set of routes for CRUD operations, reducing the need for manual route definition.
Consistency: It promotes consistency in route naming and structure throughout the application.
Conventional behavior: It aligns with RESTful principles and conventions, making the codebase more maintainable and understandable.
                                                                                                    
                                                                                                    
                                                                                                    


Cons of using resources: ------------------------------->

Overgeneration: In some cases, you might not need all the standard routes generated by resources.
  This can result in unused routes cluttering your application.
Limited customization: resources provides a predefined set of routes, and customizing them beyond the 
  standard CRUD operations may require additional configuration.



   
Using manual routes:  ------------------------------->

Manual routes allow you to define routes explicitly using the get, post, patch, put, and delete methods.
This approach provides more flexibility and control over the routes.


# config/routes.rb
Rails.application.routes.draw do
  get 'students', to: 'students#index'
end



Pros of using manual routes:   ------------------------------->

Flexibility:                      You have complete control over the routes and can define them according to your specific requirements.
Fine-grained customization:       You can create routes for actions beyond the standard CRUD operations and define custom URL patterns.
Reduced route clutter:            With manual routes, you only define the routes you actually need, reducing the number of unused routes in the application.



 
Cons of using manual routes:  ------------------------------->

Increased complexity: Defining routes manually requires a deeper understanding of routing and can result in more code to manage.
Inconsistent naming: Without the standardized naming provided by resources,
  you need to ensure consistent naming conventions manually.

 
When to use resources vs. manual routes:  ------------------------------->

------->  Use resources when you want to follow RESTful conventions, need the standard CRUD operations,
and desire the convenience and consistency provided by Rails route generation.
 
------->  Use manual routes when you need fine-grained control over the routes, want to define non-standard actions,
or prefer to avoid unnecessary routes generated by resources.
 
------->  Ultimately, the choice between resources and manual routes depends on the complexity and specific requirements of your application.
Its common to use a combination of both approaches in larger Rails applications to strike a balance between convention and customization.





MORE EXPLANATION
******************************************************************************************************************************



Certainly! Heres a detailed explanation of the pros and cons of using resources or manual routes, 
as well as the reasons to choose one over the other:

Pros of using resources:

Convenience and speed: resources provides a quick and convenient way to define standard RESTful routes for a resource, 
  reducing the need for manual route definition.
Consistency: resources enforces naming conventions and structure, promoting consistency across the application.
  It makes it easier for developers to understand and navigate the codebase.
Automatic route generation: resources automatically generates routes for common CRUD operations
  (index, show, new, create, edit, update, destroy), reducing repetitive manual work.
Integration with Rails conventions: resources aligns with RESTful principles and conventions,
  making the codebase more maintainable and understandable.
Cons of using resources:

Overgeneration of routes: In some cases, you might not need all the standard routes generated by resources,
  leading to unused routes cluttering your application.
Limited customization: resources provides a predefined set of routes, 
  and customizing them beyond the standard CRUD operations may require additional configuration or the use of 
  member or collection routes.
Pros of using manual routes:

Flexibility and control: Manual routes provide complete control over the routes and allow for fine-grained customization.
  You can define routes specific to your applications needs and actions.
Reduced route clutter: With manual routes, you only define the routes you actually need,
  eliminating unnecessary routes from the application.
Non-standard actions: Manual routes enable you to define routes for actions that go beyond the standard CRUD operations,
  giving you more flexibility in handling specific business logic.
Cons of using manual routes:

Increased complexity: Defining routes manually requires a deeper understanding of routing and can result in more code to manage.
Inconsistent naming: Without the standardized naming provided by resources, you need to ensure consistent naming conventions manually.
More maintenance: With manual routes, yore responsible for maintaining the routes as the application evolves,
  which can become cumbersome in larger projects.
When to use resources vs. manual routes:

Use resources when you want to follow RESTful conventions, need the standard CRUD operations,
and desire the convenience and consistency provided by Rails route generation.
Its suitable for most applications and helps in adhering to best practices.
Use manual routes when you need fine-grained control over the routes, want to define non-standard actions, 
or prefer to avoid unnecessary routes generated by resources. Manual routes are helpful for handling
complex or unique requirements in your application.
How to use manual routes:
To use manual routes, you can define them explicitly in your config/routes.rb file using the appropriate HTTP verb 
(e.g., get, post, patch, put, delete).

Heres an example of defining a manual route for the index action of a StudentsController:

ruby
Copy code
# config/routes.rb
Rails.application.routes.draw do
  get 'students', to: 'students#index'
end
In the above example, the get method is used to define a route that maps the URL /students to the index action of 
the StudentsController.

You can use other HTTP verbs and specify additional options as needed for different types of requests and actions.

Overall, the decision to use resources or manual routes depends on the specific needs and complexity of your application. 
Consider factors such as consistency, convenience, customization, and maintenance when making a choice between the two.
